/** User record in the database
 * @property {string} username - Unique username
 * @property {string} email - Unique email address
 * @property {string} password - Hashed password
 */
export type DBUser = {
  id: string;                    // PRIMARY KEY UUID
  name: string | null;          
  username: string;              // UNIQUE NOT NULL
  email: string;                 // UNIQUE NOT NULL
  password: string;              // NOT NULL
  created_at: string;            // TIMESTAMP WITH TIME ZONE
  updated_at: string;            // TIMESTAMP WITH TIME ZONE
  last_seen: Date;
  status: string | null;
}

/** Message record in the database
 * @property {string} sender_id - References users(id)
 * @property {string | null} receiver_id - References users(id), null for group messages
 * @property {string | null} group_id - References groups(id), null for direct messages
 * @property {boolean} is_bot_generated - Indicates if the message was generated by a bot
 * @property {boolean} is_automated_response - Indicates if the message is an automated response for an away/offline user
 * @property {string | null} original_message_id - References the message that triggered this automated response
 * @property {string | null} reply_to_message_id - References the parent message in a thread, null for top-level messages
 * @property {Source[] | null} source_documents - Source documents used by bot to generate response
 * @property {number} depth - The depth level in a thread hierarchy (1 for root messages)
 */
export type DBMessage = {
  id: string;                    // PRIMARY KEY UUID
  content: string;               // NOT NULL
  created_at: string;            // TIMESTAMP WITH TIME ZONE
  sender_id: string;             // FOREIGN KEY
  receiver_id: string | null;    // FOREIGN KEY
  group_id: string | null;       // FOREIGN KEY
  is_bot_generated: boolean;     // DEFAULT FALSE
  is_automated_response: boolean; // DEFAULT FALSE
  original_message_id: string | null; // FOREIGN KEY REFERENCES messages(id)
  reply_to_message_id: string | null; // FOREIGN KEY REFERENCES messages(id)
  sender_type: 'user' | 'bot';   // Type of the sender
  receiver_type: 'user' | 'bot' | null; // Type of the receiver
  source_documents?: Source[] | null; // Source documents for bot responses
  depth?: number;                // Thread depth level
}

/** Message embedding record in the database
 * @property {string} message_id - References messages(id)
 * @property {number[]} embedding - Vector representation of the message content
 * @property {Object} metadata - Additional metadata about the embedding
 */
export type DBMessageEmbedding = {
  id: string;                    // PRIMARY KEY UUID
  message_id: string;            // FOREIGN KEY
  embedding: number[];           // VECTOR(1536)
  metadata: {
    model_name?: string;         // Name of the embedding model used
    context_type?: string;       // Type of context (e.g., 'direct_message', 'group_message')
    [key: string]: any;          // Additional metadata fields
  };
  created_at: string;            // TIMESTAMP WITH TIME ZONE
}

/** Group record in the database
 * @property {boolean} is_primary - Only one group can have is_primary=true
 */
export type DBGroup = {
  id: string;                    // PRIMARY KEY UUID
  name: string;                  // NOT NULL
  created_at: string;            // TIMESTAMP WITH TIME ZONE
  is_primary: boolean;           // Constrained by single_primary_group
}

/** Group membership record in the database
 * @property {string} user_id - Part of composite UNIQUE constraint with group_id
 * @property {string} group_id - Part of composite UNIQUE constraint with user_id
 */
export type DBGroupMember = {
  id: string;                    // PRIMARY KEY UUID
  user_id: string;               // FOREIGN KEY
  group_id: string;              // FOREIGN KEY
  joined_at: string;             // TIMESTAMP WITH TIME ZONE
}

// Frontend-specific types that extend the database types
export type SafeUser = Omit<DBUser, 'password' | 'email'>;

export interface Conversation {
  id: string;
  type: 'direct' | 'group' | 'bot';
  name: string;
}

export type AutoStatus = 'online' | 'away' | 'dnd' | 'offline';

export interface UserDevice {
  id: string;
  last_active: string;
  user_agent: string;
  status?: string;
}

export interface UserStatus {
  user_id: string;
  manual_status: string | null;
  invisible: boolean;
  last_seen: string;
  devices: UserDevice[];
}

export interface EffectiveStatus {
  userId: string;
  status: string;
  deviceId: string | null;
  isOnline: boolean;
  lastSeen: string;
}

export interface UserMood {
  id: string;
  user_id: string;
  mood: string;
  created_at: Date;
  updated_at: Date;
}

export interface MessageReaction {
  id: string;
  message_id: string;
  user_id: string;
  emoji: string;
  created_at: string;
  name: string;
  username: string;
}

// Add a helper type for grouped reactions
export interface GroupedReactions {
  [emoji: string]: Array<{
    userId: string;
    name: string;
    username: string;
  }>;
}

export interface FileData {
  id: string;
  filename: string;
  filesize: number;
  uploader_id: string;
  uploader_username: string;
  uploaded_at: string;
  download_url?: string;
}

/** Search result type returned by the search API */
export type SearchResult = DBMessage & {
  sender: {
    id: string;
    name: string | null;
    username: string;
    image?: string;
  };
};

/** Source document used by bot to generate response */
export interface Source {
  pageContent: string;
  metadata: Record<string, any>;
}